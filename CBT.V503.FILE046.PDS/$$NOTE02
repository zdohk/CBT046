         Updates to the ULUT access method for UCB Scans
         ------- -- --- ---- ------ ------ --- --- -----

0.  In the PACKRAT program, you give the program a volser, and the
    program lists all the datasets in the VTOC of the volume for you.
    In order to find the volume, the PACKRAT program (specifically
    the BACKEND program) does a scan of all the defined UCB's in the
    system, and looks to see if there is a match, to the volser that
    you have specified.  This UCB lookup is usually done with via the
    UCBSCAN macro, but there are other ways to do it.  For z/OS
    systems (as opposed to XA and pre-XA MVS systems) we have two
    ways:  the UCBSCAN macro, or a direct lookup to the z/OS UCB
    Lookup Table (or ULUT).  The UCBSCAN macro is IBM's official way
    to do it, but we have researched the other way as well.  The
    BACKENDZ program uses the UCBSCAN method, and the BACKENDU
    program uses the direct ULUT lookup method.

1.  There are 3 types of UCB Lookup Tables (ULUT's).  They are called
    Type 1, Type 2, and Type 3.  The Type 3 ULUT is in 64-bit storage
    and needs 64-bit instructions to access it.  All of this stuff is
    in the macros, as follows:

2.  If you are using 64-bit access, you have to clear all hi-order
    31-bit addresses to have the X'80000000' bit turned off.  I use
    the LLGTR Rx,Rx instruction to do this.

3.  All coding for the ULUT access has been incorporated into 3 macros:

    ULUINIT, ULUSCAN, and ULUDSECT.  These macros are found in this
    pds.

    The 3 versions of the UCB Lookup Table (ULUT) are all coded-for
    in these 3 macros, so you don't have to worry too much about the
    internals.

4.  The ULUINIT and ULUSCAN macros require (at this level) an 88-byte
    work area.  This work area is mapped by the ULUDSECT macro.

5.  The ULUINIT macro sets up the work area.  When you scan each UCB,
    you do it, using repeated invocations of the ULUSCAN macro, in a
    loop.  After each ULUSCAN macro, before you loop, move ULUDNEXT
    (the next ULUT Table entry) into ULUDCURR (the current ULUT Table
    entry), and then invoke ULUSCAN again.  Repeat until you get to
    the end of the table.  See the BACKENDU code for a coding example.




